export default  [{"guide": {"html": "<div class=\"text-center\"><h2>A broken program</h2></div><hr />\n\n<p>\n    Here's a program you might reasonably be expected to write \n    in CS 106A, in which you implement a function, <code>sum_pairs</code>,\n    that computes the sum of each pair of elements in a list. \n</p>\n<p>\n    The program on the left is a first attempt at solving the \n    problem, but unfortunately isn't quite right. Upon running the \n    program in the terminal, it crashes, producing the output \n    in the panel above. \n</p>\n<p>\n    That error message looks scary, but it's actually Python's \n    way of providing as much useful information as it can to help\n    you diagnose and cure your program of its bugs. In this tutorial, \n    we'll review how to read an error message like this: which parts\n    are important and equally, which parts you can safely ignore. \n    Once we've done that, we'll take a look at how we can use this \n    feedback to adjust and eventually fix our program.\n</p>\n<p>\n    Click 'Next' in the top right to continue.\n</p>"}, "editor": {"highlightedLines": [], "text": "\ndef sum_pairs(lst):\n    \"\"\"\n    Given a nonempty list of integers, computes \n    the sum of each pair of consecutive integers \n    and returns a list of these sums.\n\n    >>> sum_pairs([1,2,3,4])\n    [3, 5, 7]\n    \"\"\"\n    result = []\n\n    for i in range(0, len(lst)):\n        pair_sum = lst[i] + lst[i + 1]\n        result.append(pair_sum)\n\n    return result\n\n\ndef main():\n    # define a list to test with\n    lst = [1, 2, 3, 4]\n    print(sum_pairs(lst))\n\n\nif __name__ == \"__main__\":\n    main()"}, "terminal": {"highlightedLines": [], "text": "$ python3 sum_pairs.py\nTraceback (most recent call last):\n    File \"sum_pairs.py\", line 27, in <module>\n        main()\n    File \"sum_pairs.py\", line 23, in main\n        print(sum_pairs(lst))\n    File \"sum_pairs.py\", line 14, in sum_pairs\n        pair_sum = lst[i] + lst[i + 1]\nIndexError: list index out of range"}}, {"guide": {"html": "<div class=\"text-center\"><h2>What causes an error message?</h2></div><hr />\n<p>\n    Formally, we see error messages like this when our program \n    encounters a line of code that causes an error. There are \n    many different kinds of errors, some far more common than \n    others, each caused by a different kind of problem in the \n    program. \n</p>\n<p>\n    When such a problem occurs and causes an error, a program \n    does what is formally referred to as <i>throwing an exception</i>. \n    This means that the program stops attempting to run and \n    instead signals that it has run into an issue. There are \n    ways to catch such signals and deal with them gracefully,\n    but typically throwing an exception simply halts the \n    program's execution and displays an error message in the \n    terminal. \n</p>\n"}, "editor": {"highlightedLines": [], "text": "\ndef sum_pairs(lst):\n    \"\"\"\n    Given a nonempty list of integers, computes \n    the sum of each pair of consecutive integers \n    and returns a list of these sums.\n\n    >>> sum_pairs([1,2,3,4])\n    [3, 5, 7]\n    \"\"\"\n    result = []\n\n    for i in range(0, len(lst)):\n        pair_sum = lst[i] + lst[i + 1]\n        result.append(pair_sum)\n\n    return result\n\n\ndef main():\n    # define a list to test with\n    lst = [1, 2, 3, 4]\n    print(sum_pairs(lst))\n\n\nif __name__ == \"__main__\":\n    main()"}, "terminal": {"highlightedLines": [], "text": "$ python3 sum_pairs.py\nTraceback (most recent call last):\n    File \"sum_pairs.py\", line 27, in <module>\n        main()\n    File \"sum_pairs.py\", line 23, in main\n        print(sum_pairs(lst))\n    File \"sum_pairs.py\", line 14, in sum_pairs\n        pair_sum = lst[i] + lst[i + 1]\nIndexError: list index out of range"}}, {"guide": {"html": "<div class=\"text-center\"><h2> Anatomy of an error message: the exception </h2></div><hr />\n<p>\n    Somewhat counterintuitively, we usually begin reading error messages \n    at the end. The last line of an error message--highlighted above--\n    tells the programmer what went wrong. It consists of two parts: \n    the specific exception that occurred (in this case, an \n    <code>IndexError</code>), and then an explanation in English of \n    the problem (specifically, that an index into a list was out\n    of the range of valid indices).\n</p>"}, "editor": {"highlightedLines": [], "text": "\ndef sum_pairs(lst):\n    \"\"\"\n    Given a nonempty list of integers, computes \n    the sum of each pair of consecutive integers \n    and returns a list of these sums.\n\n    >>> sum_pairs([1,2,3,4])\n    [3, 5, 7]\n    \"\"\"\n    result = []\n\n    for i in range(0, len(lst)):\n        pair_sum = lst[i] + lst[i + 1]\n        result.append(pair_sum)\n\n    return result\n\n\ndef main():\n    # define a list to test with\n    lst = [1, 2, 3, 4]\n    print(sum_pairs(lst))\n\n\nif __name__ == \"__main__\":\n    main()"}, "terminal": {"highlightedLines": [9], "text": "$ python3 sum_pairs.py\nTraceback (most recent call last):\n    File \"sum_pairs.py\", line 27, in <module>\n        main()\n    File \"sum_pairs.py\", line 23, in main\n        print(sum_pairs(lst))\n    File \"sum_pairs.py\", line 14, in sum_pairs\n        pair_sum = lst[i] + lst[i + 1]\nIndexError: list index out of range"}}, {"guide": {"html": "\n<div class=\"text-center\"><h2> Anatomy of an error message: the Traceback </h2></div><hr />\n<p>\n    The other important part of an error message--highlighted above--\n    is the <i>traceback</i>. While this is undeniably the more \n    intimidating-looking of the two sections, it's perhaps your \n    single most powerful tool as you try to isolate the \n    problematic portion of your code. \n</p>\n<p>\n    Fortunately for us, the traceback is particularly well structured \n    and with a firm grasp of that structure, a programmer can quickly \n    isolate what part of their code is causing the exception. \n</p>"}, "editor": {"highlightedLines": [], "text": "\ndef sum_pairs(lst):\n    \"\"\"\n    Given a nonempty list of integers, computes \n    the sum of each pair of consecutive integers \n    and returns a list of these sums.\n\n    >>> sum_pairs([1,2,3,4])\n    [3, 5, 7]\n    \"\"\"\n    result = []\n\n    for i in range(0, len(lst)):\n        pair_sum = lst[i] + lst[i + 1]\n        result.append(pair_sum)\n\n    return result\n\n\ndef main():\n    # define a list to test with\n    lst = [1, 2, 3, 4]\n    print(sum_pairs(lst))\n\n\nif __name__ == \"__main__\":\n    main()"}, "terminal": {"highlightedLines": [3, 4, 5, 6, 7, 8], "text": "$ python3 sum_pairs.py\nTraceback (most recent call last):\n    File \"sum_pairs.py\", line 27, in <module>\n        main()\n    File \"sum_pairs.py\", line 23, in main\n        print(sum_pairs(lst))\n    File \"sum_pairs.py\", line 14, in sum_pairs\n        pair_sum = lst[i] + lst[i + 1]\nIndexError: list index out of range"}}, {"guide": {"html": "\n<div class=\"text-center\"><h2> Anatomy of an error message: the Traceback </h2></div><hr />\n<p>\n    Each pair of lines in the Traceback refers to a \n    line of Python code. Once again, we read the \n    Traceback bottom-up.\n</p>\n<p>\n    The two highlighted lines in the terminal provide \n    us several pieces of information:\n</p>\n<ul>\n    <li>\n        The first line tells us that the error is \n        happening in <code>sum_pairs.py</code>,\n        on line 14 (which is highlighted on the \n        right), which is a part of the <code>\n        sum_pairs</code> function.\n    </li>\n    <li>\n        The second line shows us the contents\n        of the line of code in question. \n    </li>\n</ul>\n<p>\n    This is the line of code that actually ran into \n    the <code>IndexError</code>. It isn't necessarily \n    where the mistake was made: it might have happened \n    somewhere else in the code and only actually caused \n    an error here, but now we've narrowed down the symptom,\n    if not the cause. \n</p>"}, "editor": {"highlightedLines": [14], "text": "\ndef sum_pairs(lst):\n    \"\"\"\n    Given a nonempty list of integers, computes \n    the sum of each pair of consecutive integers \n    and returns a list of these sums.\n\n    >>> sum_pairs([1,2,3,4])\n    [3, 5, 7]\n    \"\"\"\n    result = []\n\n    for i in range(0, len(lst)):\n        pair_sum = lst[i] + lst[i + 1]\n        result.append(pair_sum)\n\n    return result\n\n\ndef main():\n    # define a list to test with\n    lst = [1, 2, 3, 4]\n    print(sum_pairs(lst))\n\n\nif __name__ == \"__main__\":\n    main()"}, "terminal": {"highlightedLines": [7, 8], "text": "$ python3 sum_pairs.py\nTraceback (most recent call last):\n    File \"sum_pairs.py\", line 27, in <module>\n        main()\n    File \"sum_pairs.py\", line 23, in main\n        print(sum_pairs(lst))\n    File \"sum_pairs.py\", line 14, in sum_pairs\n        pair_sum = lst[i] + lst[i + 1]\nIndexError: list index out of range"}}, {"guide": {"html": "\n<div class=\"text-center\"><h2> Anatomy of an error message: the Traceback </h2></div><hr />\n<p>\n    The previous pair of lines indicated to us that \n    the error occurred during the execution of \n    the <code>sum_pairs</code> function. Moving \n    to the pair of lines above it tells us where the \n    <code>sum_pairs</code> function was called \n    to give us some more context as to the how the \n    error occurred.\n</p>\n<ul>\n    <li>\n        The first line tells us that the <code>\n        sum_pairs</code> function was called \n        in <code>sum_pairs.py</code>, on line \n        23, in the <code>main</code> function. \n        Additionally, we see that it's called \n        with the parameter <code>[1, 2, 3, 4]</code>.\n    </li>\n    <li>\n        The second line shows us the contents\n        of the line of code in question. \n    </li>\n</ul>"}, "editor": {"highlightedLines": [23], "text": "\ndef sum_pairs(lst):\n    \"\"\"\n    Given a nonempty list of integers, computes \n    the sum of each pair of consecutive integers \n    and returns a list of these sums.\n\n    >>> sum_pairs([1,2,3,4])\n    [3, 5, 7]\n    \"\"\"\n    result = []\n\n    for i in range(0, len(lst)):\n        pair_sum = lst[i] + lst[i + 1]\n        result.append(pair_sum)\n\n    return result\n\n\ndef main():\n    # define a list to test with\n    lst = [1, 2, 3, 4]\n    print(sum_pairs(lst))\n\n\nif __name__ == \"__main__\":\n    main()"}, "terminal": {"highlightedLines": [5, 6], "text": "$ python3 sum_pairs.py\nTraceback (most recent call last):\n    File \"sum_pairs.py\", line 27, in <module>\n        main()\n    File \"sum_pairs.py\", line 23, in main\n        print(sum_pairs(lst))\n    File \"sum_pairs.py\", line 14, in sum_pairs\n        pair_sum = lst[i] + lst[i + 1]\nIndexError: list index out of range"}}, {"guide": {"html": "\n<div class=\"text-center\"><h2> Anatomy of an error message: the Traceback </h2></div><hr />\n<p>\n    The last portion of the Traceback suggested to us \n    that the error in the program's execution occurred\n    during the execution of the <code>main</code>\n    function.\n</p>\n<p>\n    With this in mind, we can move up in the Traceback \n    once more, which gives us two final pieces of \n    information:\n</p>\n<ul>\n    <li>\n        The first line tells us that the <code>\n        main</code> function was called \n        in <code>sum_pairs.py</code>, on line \n        27, but not in a function, but rather \n        in the module (<code>sum_pairs.py</code>).\n    </li>\n    <li>\n        The second line shows us the contents\n        of the line of code in question. \n    </li>\n</ul>\n"}, "editor": {"highlightedLines": [27], "text": "\ndef sum_pairs(lst):\n    \"\"\"\n    Given a nonempty list of integers, computes \n    the sum of each pair of consecutive integers \n    and returns a list of these sums.\n\n    >>> sum_pairs([1,2,3,4])\n    [3, 5, 7]\n    \"\"\"\n    result = []\n\n    for i in range(0, len(lst)):\n        pair_sum = lst[i] + lst[i + 1]\n        result.append(pair_sum)\n\n    return result\n\n\ndef main():\n    # define a list to test with\n    lst = [1, 2, 3, 4]\n    print(sum_pairs(lst))\n\n\nif __name__ == \"__main__\":\n    main()"}, "terminal": {"highlightedLines": [3, 4], "text": "$ python3 sum_pairs.py\nTraceback (most recent call last):\n    File \"sum_pairs.py\", line 27, in <module>\n        main()\n    File \"sum_pairs.py\", line 23, in main\n        print(sum_pairs(lst))\n    File \"sum_pairs.py\", line 14, in sum_pairs\n        pair_sum = lst[i] + lst[i + 1]\nIndexError: list index out of range"}}, {"guide": {"html": "\n<div class=\"text-center\"><h2> Fixing the program </h2></div><hr />\n<p>\n    Now that we have a sense of what each of the individual \n    parts of the error message tell us, we can move on to \n    understanding how we can use this information to correct\n    our program.\n</p>\n<p>\n    The most telling piece of evidence is that we have an \n    <code>IndexError</code> in our code, meaning that an \n    index we're using into our list is invalid. \n</p>\n<p>\n    As a result, we need to find a place in our code wherein\n    we're indexing into a list, and investigate how we might\n    be using an invalid index there. The error message \n    suggests that it's happening in one of three places:\n</p>\n<ul>\n    <li>Line 14: <code>pair_sum = lst[i] + lst[i + 1]</code></li>\n    <li>Line 23: <code>print(sum_pairs(lst))</code></li>\n    <li>Line 27: <code>main()</code></li>\n</ul>\n<p>\n    Before moving onto the next section, try figuring out \n    which of these lines might be incorrectly indexing into a list.\n    Which of them is indexing into a list at all? \n</p>\n"}, "editor": {"highlightedLines": [], "text": "\ndef sum_pairs(lst):\n    \"\"\"\n    Given a nonempty list of integers, computes \n    the sum of each pair of consecutive integers \n    and returns a list of these sums.\n\n    >>> sum_pairs([1,2,3,4])\n    [3, 5, 7]\n    \"\"\"\n    result = []\n\n    for i in range(0, len(lst)):\n        pair_sum = lst[i] + lst[i + 1]\n        result.append(pair_sum)\n\n    return result\n\n\ndef main():\n    # define a list to test with\n    lst = [1, 2, 3, 4]\n    print(sum_pairs(lst))\n\n\nif __name__ == \"__main__\":\n    main()"}, "terminal": {"highlightedLines": [], "text": "$ python3 sum_pairs.py\nTraceback (most recent call last):\n    File \"sum_pairs.py\", line 27, in <module>\n        main()\n    File \"sum_pairs.py\", line 23, in main\n        print(sum_pairs(lst))\n    File \"sum_pairs.py\", line 14, in sum_pairs\n        pair_sum = lst[i] + lst[i + 1]\nIndexError: list index out of range"}}, {"guide": {"html": "\n<div class=\"text-center\"><h2> Isolating the cause </h2></div><hr />\n<p>\n    Line 14 of the program is likely the culprit,\n    since it's the only one of the lines of code \n    which is accessing an index in a list: \n</p>\n<div class=\"text-center\">\n    <code>pair_sum = lst[i] + lst[i + 1]</code>\n</div>\n<br />\n<p>\n    We're using two separate indices in this line: \n    <code>i</code> and <code>i + 1</code>. Either of \n    these might be invalid, and in order to fix our \n    program, we need to identify which index is the \n    problematic one. \n</p>\n<p>\n    There are several strategies you might reasonably\n    choose to employ at this point. Perhaps the most \n    tempting might be to try to reason through the code, \n    and deduce what is causing the program's misbehaviour. \n</p>\n<p>\n    This isn't a bad idea, and is eventually what we'll \n    turn to. That said, correct and effective deduction relies on \n    plentiful evidence, and we might not have quite enough \n    evidence just yet. For example, line 27 occurs within a \n    <code>for</code> loop, and it's unclear to us which \n    iteration of the <code>for</code> loop the error is \n    occurring in. Luckily, there's one tool you're very \n    familiar with already that can help us collect this \n    evidence: the <code>print</code> function.\n</p>\n\n"}, "editor": {"highlightedLines": [14], "text": "\ndef sum_pairs(lst):\n    \"\"\"\n    Given a nonempty list of integers, computes \n    the sum of each pair of consecutive integers \n    and returns a list of these sums.\n\n    >>> sum_pairs([1,2,3,4])\n    [3, 5, 7]\n    \"\"\"\n    result = []\n\n    for i in range(0, len(lst)):\n        pair_sum = lst[i] + lst[i + 1]\n        result.append(pair_sum)\n\n    return result\n\n\ndef main():\n    # define a list to test with\n    lst = [1, 2, 3, 4]\n    print(sum_pairs(lst))\n\n\nif __name__ == \"__main__\":\n    main()"}, "terminal": {"highlightedLines": [], "text": "$ python3 sum_pairs.py\nTraceback (most recent call last):\n    File \"sum_pairs.py\", line 27, in <module>\n        main()\n    File \"sum_pairs.py\", line 23, in main\n        print(sum_pairs(lst))\n    File \"sum_pairs.py\", line 14, in sum_pairs\n        pair_sum = lst[i] + lst[i + 1]\nIndexError: list index out of range"}}, {"guide": {"html": "<div class=\"text-center\"><h2> Debugging with <code>print</code></h2></div><hr />\n<p>\n    You might be most familiar with <code>print</code>\n    as a function that outputs information for a user \n    to read, but it's also an instrumental tool in \n    inspecting the state of your program and your variables\n    as you debug a program. \n</p>\n<p>\n    As a reminder, our current task is to identify which \n    of the indices <code>i</code> or <code>i + 1</code> on \n    line 14 might be causing an <code>IndexError</code> in \n    our code. The problem that presented itself to us was \n    that we weren't certain which iteration of the <code>for</code> loop\n    on line 13 the error was actually happening in. \n</p>\n<p>\n    Thus, it might be helpful for us to see how many times \n    the <code>for</code> loop is executed before the crash \n    occurs. In addition, since we're interested in the values \n    of <code>i</code> and <code>i + 1</code> as the for loop \n    progresses, we might want to see their values too. \n</p>\n<p>\n    Before moving to the next section, take a look at the \n    <code>for</code> loop. What might you want to <code>print</code>, \n    and when, in order to get some additional helpful \n    evidence?\n</p>\n\n\n\n"}, "editor": {"highlightedLines": [13, 14], "text": "\ndef sum_pairs(lst):\n    \"\"\"\n    Given a nonempty list of integers, computes \n    the sum of each pair of consecutive integers \n    and returns a list of these sums.\n\n    >>> sum_pairs([1,2,3,4])\n    [3, 5, 7]\n    \"\"\"\n    result = []\n\n    for i in range(0, len(lst)):\n        pair_sum = lst[i] + lst[i + 1]\n        result.append(pair_sum)\n\n    return result\n\n\ndef main():\n    # define a list to test with\n    lst = [1, 2, 3, 4] \n    print(sum_pairs(lst))\n\n\nif __name__ == \"__main__\":\n    main()"}, "terminal": {"highlightedLines": [], "text": "$ python3 sum_pairs.py\nTraceback (most recent call last):\n    File \"sum_pairs.py\", line 27, in <module>\n        main()\n    File \"sum_pairs.py\", line 23, in main\n        print(sum_pairs(lst))\n    File \"sum_pairs.py\", line 14, in sum_pairs\n        pair_sum = lst[i] + lst[i + 1]\nIndexError: list index out of range"}}, {"guide": {"html": "<div class=\"text-center\"><h2> Debugging with <code>print</code></h2></div><hr />\n<p>\n    While there isn't a single correct answer to the \n    question presented in the last section, the simplest \n    possible <code>print</code> that still provides \n    us with helpful output is to <code>print(i)</code>\n    at the beginning of each iteration of the for loop. \n</p>\n<p>\n    Importantly, we do this <code>print</code> before we index into \n    the list on line 15. The program crashes on that line, \n    and we'd like to have the <code>print</code> execute before that \n    crash.\n</p>\n<p>\n    Now, when we run the program, we see some additional output,\n    highlighted in the terminal above. \n</p>\n\n\n\n"}, "editor": {"highlightedLines": [14], "text": "\ndef sum_pairs(lst):\n    \"\"\"\n    Given a nonempty list of integers, computes \n    the sum of each pair of consecutive integers \n    and returns a list of these sums.\n\n    >>> sum_pairs([1,2,3,4])\n    [3, 5, 7]\n    \"\"\"\n    result = []\n\n    for i in range(0, len(lst)):\n        print(i)\n        pair_sum = lst[i] + lst[i + 1]\n        result.append(pair_sum)\n\n    return result\n\n\ndef main():\n    # define a list to test with\n    lst = [1, 2, 3, 4] \n    print(sum_pairs(lst))\n\n\nif __name__ == \"__main__\":\n    main()"}, "terminal": {"highlightedLines": [2, 3, 4, 5], "text": "$ python3 sum_pairs.py\n0\n1\n2\n3\nTraceback (most recent call last):\n    File \"sum_pairs.py\", line 27, in <module>\n        main()\n    File \"sum_pairs.py\", line 23, in main\n        print(sum_pairs(lst))\n    File \"sum_pairs.py\", line 14, in sum_pairs\n        pair_sum = lst[i] + lst[i + 1]\nIndexError: list index out of range"}}, {"guide": {"html": "<div class=\"text-center\"><h2> Debugging with <code>print</code></h2></div><hr />\n<p>\n    The output from our <code>print</code> statement \n    provides a key piece of evidence: the program crashes \n    in the fourth iteration of the for loop, when <code>\n    i=3</code>. \n</p>\n<p>\n    This means that the indices <code>i</code> and \n    <code>i + 1</code> are 3 and 4, respectively. \n    On line 15, we use these as indices into \n    <code>lst</code>, which is equal to <code>\n    [1, 2, 3, 4]</code>.\n</p>\n<p>\n    Before moving to the next section, try reasoning \n    about which of these indices is the problematic one. \n    Why is it problematic? What can we do to fix it?\n</p>\n\n\n\n"}, "editor": {"highlightedLines": [], "text": "\ndef sum_pairs(lst):\n    \"\"\"\n    Given a nonempty list of integers, computes \n    the sum of each pair of consecutive integers \n    and returns a list of these sums.\n\n    >>> sum_pairs([1,2,3,4])\n    [3, 5, 7]\n    \"\"\"\n    result = []\n\n    for i in range(0, len(lst)):\n        print(i)\n        pair_sum = lst[i] + lst[i + 1]\n        result.append(pair_sum)\n\n    return result\n\n\ndef main():\n    # define a list to test with\n    lst = [1, 2, 3, 4] \n    print(sum_pairs(lst))\n\n\nif __name__ == \"__main__\":\n    main()"}, "terminal": {"highlightedLines": [2, 3, 4, 5], "text": "$ python3 sum_pairs.py\n0\n1\n2\n3\nTraceback (most recent call last):\n    File \"sum_pairs.py\", line 27, in <module>\n        main()\n    File \"sum_pairs.py\", line 23, in main\n        print(sum_pairs(lst))\n    File \"sum_pairs.py\", line 14, in sum_pairs\n        pair_sum = lst[i] + lst[i + 1]\nIndexError: list index out of range"}}, {"guide": {"html": "<div class=\"text-center\"><h2> The root cause</code></h2></div><hr />\n<p>\n    The problematic index is <code>i + 1</code>, which in the 4th \n    iteration of the <code>for</code> loop is equal to <code>4</code> \n    (remember, <code>i</code> starts off with a value of <code>0</code>).\n    <code>lst</code> has 4 elements, so accessing <code>lst[i + 1]</code>\n    is an invalid index and so causes the <code>IndexError</code>.\n</p>\n<p>\n    In short, our problem is that we're running off the end of the list:\n    specifically, that we're going through the loop one too many times. \n    Semantically, it's probably unnecessary that we even get there: our goal \n    in the function is to sum elements in the list with the elements that follow\n    them, and there's nothing after the last element in the list. \n</p>\n<p>\n    With that in mind, think about how you'd change this code to fix the bug \n    before moving to the next section. \n</p>\n\n\n\n\n"}, "editor": {"highlightedLines": [13], "text": "\ndef sum_pairs(lst):\n    \"\"\"\n    Given a nonempty list of integers, computes \n    the sum of each pair of consecutive integers \n    and returns a list of these sums.\n\n    >>> sum_pairs([1,2,3,4])\n    [3, 5, 7]\n    \"\"\"\n    result = []\n\n    for i in range(0, len(lst)):\n        print(i)\n        pair_sum = lst[i] + lst[i + 1]\n        result.append(pair_sum)\n\n    return result\n\n\ndef main():\n    # define a list to test with\n    lst = [1, 2, 3, 4] \n    print(sum_pairs(lst))\n\n\nif __name__ == \"__main__\":\n    main()"}, "terminal": {"highlightedLines": [], "text": "$ python3 sum_pairs.py\n0\n1\n2\n3\nTraceback (most recent call last):\n    File \"sum_pairs.py\", line 27, in <module>\n        main()\n    File \"sum_pairs.py\", line 23, in main\n        print(sum_pairs(lst))\n    File \"sum_pairs.py\", line 14, in sum_pairs\n        pair_sum = lst[i] + lst[i + 1]\nIndexError: list index out of range"}}, {"guide": {"html": "<div class=\"text-center\"><h2> Another bug bites the dust</h2></div><hr />\n<p>\n    With all that behind us, the fix is relatively simple: \n    rather than setting the upper bound of the call to \n    <code>range</code> to be <code>len(lst)</code>, \n    we set it to be <code>len(lst) - 1</code>. This \n    means that the maximum possible value of <code>i</code>\n    is <code>len(lst) - 2</code> (or in the case of this \n    particular program, 2). Thus, the maximum value of \n    <code>i + 1</code> is <code>len(lst) - 1</code> (or\n    in the case of this particular program, 3), which \n    remains a valid index. \n</p>\n<p>\n    Running this modified program reveals to us the fruits \n    of our labor: the program doesn't crash, and more to the point, \n    gives us the correct output!\n</p>\n\n\n\n"}, "editor": {"highlightedLines": [13], "text": "\ndef sum_pairs(lst):\n    \"\"\"\n    Given a nonempty list of integers, computes \n    the sum of each pair of consecutive integers \n    and returns a list of these sums.\n\n    >>> sum_pairs([1,2,3,4])\n    [3, 5, 7]\n    \"\"\"\n    result = []\n\n    for i in range(0, len(lst) - 1):\n        pair_sum = lst[i] + lst[i + 1]\n        result.append(pair_sum)\n\n    return result\n\n\ndef main():\n    # define a list to test with\n    lst = [1, 2, 3, 4] \n    print(sum_pairs(lst))\n\n\nif __name__ == \"__main__\":\n    main()"}, "terminal": {"highlightedLines": [2], "text": "$ python3 sum_pairs.py\n[3, 5, 7]"}}];