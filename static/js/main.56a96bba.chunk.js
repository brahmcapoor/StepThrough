(this.webpackJsonpstepthrough=this.webpackJsonpstepthrough||[]).push([[0],{100:function(e,n,t){},103:function(e,n,t){},104:function(e,n,t){},105:function(e,n,t){"use strict";t.r(n);var i=t(0),a=t.n(i),r=t(9),s=t.n(r),o=t(11),l=t(24),c=t(63),h=t(27),u=[{guide:{html:"<div class=\"text-center\"><h2>A broken program</h2></div><hr />\n\n<p>\n    Here's a program you might reasonably be expected to write \n    in CS 106A, in which you implement a function, <code>sum_pairs</code>,\n    that computes the sum of each pair of elements in a list. \n</p>\n<p>\n    The program on the left is a first attempt at solving the \n    problem, but unfortunately isn't quite right. Upon running the \n    program in the terminal, it crashes, producing the output \n    in the panel above. \n</p>\n<p>\n    That error message looks scary, but it's actually Python's \n    way of providing as much useful information as it can to help\n    you diagnose and cure your program of its bugs. In this tutorial, \n    we'll review how to read an error message like this: which parts\n    are important and equally, which parts you can safely ignore. \n    Once we've done that, we'll take a look at how we can use this \n    feedback to adjust and eventually fix our program.\n</p>\n<p>\n    Click 'Next' in the top right to continue.\n</p>"},editor:{highlightedLines:[],text:'\ndef sum_pairs(lst):\n    """\n    Given a nonempty list of integers, computes \n    the sum of each pair of consecutive integers \n    and returns a list of these sums.\n\n    >>> sum_pairs([1,2,3,4])\n    [3, 5, 7]\n    """\n    result = []\n\n    for i in range(0, len(lst)):\n        pair_sum = lst[i] + lst[i + 1]\n        result.append(pair_sum)\n\n    return result\n\n\ndef main():\n    # define a list to test with\n    lst = [1, 2, 3, 4]\n    print(sum_pairs(lst))\n\n\nif __name__ == "__main__":\n    main()'},terminal:{highlightedLines:[],text:'$ python3 sum_pairs.py\nTraceback (most recent call last):\n    File "sum_pairs.py", line 27, in <module>\n        main()\n    File "sum_pairs.py", line 23, in main\n        print(sum_pairs(lst))\n    File "sum_pairs.py", line 14, in sum_pairs\n        pair_sum = lst[i] + lst[i + 1]\nIndexError: list index out of range'}},{guide:{html:'<div class="text-center"><h2>What causes an error message?</h2></div><hr />\n<p>\n    Formally, we see error messages like this when our program \n    encounters a line of code that causes an error. There are \n    many different kinds of errors, some far more common than \n    others, each caused by a different kind of problem in the \n    program. \n</p>\n<p>\n    When such a problem occurs and causes an error, a program \n    does what is formally referred to as <i>throwing an exception</i>. \n    This means that the program stops attempting to run and \n    instead signals that it has run into an issue. There are \n    ways to catch such signals and deal with them gracefully,\n    but typically throwing an exception simply halts the \n    program\'s execution and displays an error message in the \n    terminal. \n</p>\n'},editor:{highlightedLines:[],text:'\ndef sum_pairs(lst):\n    """\n    Given a nonempty list of integers, computes \n    the sum of each pair of consecutive integers \n    and returns a list of these sums.\n\n    >>> sum_pairs([1,2,3,4])\n    [3, 5, 7]\n    """\n    result = []\n\n    for i in range(0, len(lst)):\n        pair_sum = lst[i] + lst[i + 1]\n        result.append(pair_sum)\n\n    return result\n\n\ndef main():\n    # define a list to test with\n    lst = [1, 2, 3, 4]\n    print(sum_pairs(lst))\n\n\nif __name__ == "__main__":\n    main()'},terminal:{highlightedLines:[],text:'$ python3 sum_pairs.py\nTraceback (most recent call last):\n    File "sum_pairs.py", line 27, in <module>\n        main()\n    File "sum_pairs.py", line 23, in main\n        print(sum_pairs(lst))\n    File "sum_pairs.py", line 14, in sum_pairs\n        pair_sum = lst[i] + lst[i + 1]\nIndexError: list index out of range'}},{guide:{html:'<div class="text-center"><h2> Anatomy of an error message: the exception </h2></div><hr />\n<p>\n    Somewhat counterintuitively, we usually begin reading error messages \n    at the end. The last line of an error message--highlighted above--\n    tells the programmer what went wrong. It consists of two parts: \n    the specific exception that occurred (in this case, an \n    <code>IndexError</code>), and then an explanation in English of \n    the problem (specifically, that an index into a list was out\n    of the range of valid indices).\n</p>'},editor:{highlightedLines:[],text:'\ndef sum_pairs(lst):\n    """\n    Given a nonempty list of integers, computes \n    the sum of each pair of consecutive integers \n    and returns a list of these sums.\n\n    >>> sum_pairs([1,2,3,4])\n    [3, 5, 7]\n    """\n    result = []\n\n    for i in range(0, len(lst)):\n        pair_sum = lst[i] + lst[i + 1]\n        result.append(pair_sum)\n\n    return result\n\n\ndef main():\n    # define a list to test with\n    lst = [1, 2, 3, 4]\n    print(sum_pairs(lst))\n\n\nif __name__ == "__main__":\n    main()'},terminal:{highlightedLines:[9],text:'$ python3 sum_pairs.py\nTraceback (most recent call last):\n    File "sum_pairs.py", line 27, in <module>\n        main()\n    File "sum_pairs.py", line 23, in main\n        print(sum_pairs(lst))\n    File "sum_pairs.py", line 14, in sum_pairs\n        pair_sum = lst[i] + lst[i + 1]\nIndexError: list index out of range'}},{guide:{html:'\n<div class="text-center"><h2> Anatomy of an error message: the Traceback </h2></div><hr />\n<p>\n    The other important part of an error message--highlighted above--\n    is the <i>traceback</i>. While this is undeniably the more \n    intimidating-looking of the two sections, it\'s perhaps your \n    single most powerful tool as you try to isolate the \n    problematic portion of your code. \n</p>\n<p>\n    Fortunately for us, the traceback is particularly well structured \n    and with a firm grasp of that structure, a programmer can quickly \n    isolate what part of their code is causing the exception. \n</p>'},editor:{highlightedLines:[],text:'\ndef sum_pairs(lst):\n    """\n    Given a nonempty list of integers, computes \n    the sum of each pair of consecutive integers \n    and returns a list of these sums.\n\n    >>> sum_pairs([1,2,3,4])\n    [3, 5, 7]\n    """\n    result = []\n\n    for i in range(0, len(lst)):\n        pair_sum = lst[i] + lst[i + 1]\n        result.append(pair_sum)\n\n    return result\n\n\ndef main():\n    # define a list to test with\n    lst = [1, 2, 3, 4]\n    print(sum_pairs(lst))\n\n\nif __name__ == "__main__":\n    main()'},terminal:{highlightedLines:[3,4,5,6,7,8],text:'$ python3 sum_pairs.py\nTraceback (most recent call last):\n    File "sum_pairs.py", line 27, in <module>\n        main()\n    File "sum_pairs.py", line 23, in main\n        print(sum_pairs(lst))\n    File "sum_pairs.py", line 14, in sum_pairs\n        pair_sum = lst[i] + lst[i + 1]\nIndexError: list index out of range'}},{guide:{html:"\n<div class=\"text-center\"><h2> Anatomy of an error message: the Traceback </h2></div><hr />\n<p>\n    Each pair of lines in the Traceback refers to a \n    line of Python code. Once again, we read the \n    Traceback bottom-up.\n</p>\n<p>\n    The two highlighted lines in the terminal provide \n    us several pieces of information:\n</p>\n<ul>\n    <li>\n        The first line tells us that the error is \n        happening in <code>sum_pairs.py</code>,\n        on line 14 (which is highlighted on the \n        right), which is a part of the <code>\n        sum_pairs</code> function.\n    </li>\n    <li>\n        The second line shows us the contents\n        of the line of code in question. \n    </li>\n</ul>\n<p>\n    This is the line of code that actually ran into \n    the <code>IndexError</code>. It isn't necessarily \n    where the mistake was made: it might have happened \n    somewhere else in the code and only actually caused \n    an error here, but now we've narrowed down the symptom,\n    if not the cause. \n</p>"},editor:{highlightedLines:[14],text:'\ndef sum_pairs(lst):\n    """\n    Given a nonempty list of integers, computes \n    the sum of each pair of consecutive integers \n    and returns a list of these sums.\n\n    >>> sum_pairs([1,2,3,4])\n    [3, 5, 7]\n    """\n    result = []\n\n    for i in range(0, len(lst)):\n        pair_sum = lst[i] + lst[i + 1]\n        result.append(pair_sum)\n\n    return result\n\n\ndef main():\n    # define a list to test with\n    lst = [1, 2, 3, 4]\n    print(sum_pairs(lst))\n\n\nif __name__ == "__main__":\n    main()'},terminal:{highlightedLines:[7,8],text:'$ python3 sum_pairs.py\nTraceback (most recent call last):\n    File "sum_pairs.py", line 27, in <module>\n        main()\n    File "sum_pairs.py", line 23, in main\n        print(sum_pairs(lst))\n    File "sum_pairs.py", line 14, in sum_pairs\n        pair_sum = lst[i] + lst[i + 1]\nIndexError: list index out of range'}},{guide:{html:'\n<div class="text-center"><h2> Anatomy of an error message: the Traceback </h2></div><hr />\n<p>\n    The previous pair of lines indicated to us that \n    the error occurred during the execution of \n    the <code>sum_pairs</code> function. Moving \n    to the pair of lines above it tells us where the \n    <code>sum_pairs</code> function was called \n    to give us some more context as to the how the \n    error occurred.\n</p>\n<ul>\n    <li>\n        The first line tells us that the <code>\n        sum_pairs</code> function was called \n        in <code>sum_pairs.py</code>, on line \n        23, in the <code>main</code> function. \n        Additionally, we see that it\'s called \n        with the parameter <code>[1, 2, 3, 4]</code>.\n    </li>\n    <li>\n        The second line shows us the contents\n        of the line of code in question. \n    </li>\n</ul>'},editor:{highlightedLines:[23],text:'\ndef sum_pairs(lst):\n    """\n    Given a nonempty list of integers, computes \n    the sum of each pair of consecutive integers \n    and returns a list of these sums.\n\n    >>> sum_pairs([1,2,3,4])\n    [3, 5, 7]\n    """\n    result = []\n\n    for i in range(0, len(lst)):\n        pair_sum = lst[i] + lst[i + 1]\n        result.append(pair_sum)\n\n    return result\n\n\ndef main():\n    # define a list to test with\n    lst = [1, 2, 3, 4]\n    print(sum_pairs(lst))\n\n\nif __name__ == "__main__":\n    main()'},terminal:{highlightedLines:[5,6],text:'$ python3 sum_pairs.py\nTraceback (most recent call last):\n    File "sum_pairs.py", line 27, in <module>\n        main()\n    File "sum_pairs.py", line 23, in main\n        print(sum_pairs(lst))\n    File "sum_pairs.py", line 14, in sum_pairs\n        pair_sum = lst[i] + lst[i + 1]\nIndexError: list index out of range'}},{guide:{html:'\n<div class="text-center"><h2> Anatomy of an error message: the Traceback </h2></div><hr />\n<p>\n    The last portion of the Traceback suggested to us \n    that the error in the program\'s execution occurred\n    during the execution of the <code>main</code>\n    function.\n</p>\n<p>\n    With this in mind, we can move up in the Traceback \n    once more, which gives us two final pieces of \n    information:\n</p>\n<ul>\n    <li>\n        The first line tells us that the <code>\n        main</code> function was called \n        in <code>sum_pairs.py</code>, on line \n        27, but not in a function, but rather \n        in the module (<code>sum_pairs.py</code>).\n    </li>\n    <li>\n        The second line shows us the contents\n        of the line of code in question. \n    </li>\n</ul>\n'},editor:{highlightedLines:[27],text:'\ndef sum_pairs(lst):\n    """\n    Given a nonempty list of integers, computes \n    the sum of each pair of consecutive integers \n    and returns a list of these sums.\n\n    >>> sum_pairs([1,2,3,4])\n    [3, 5, 7]\n    """\n    result = []\n\n    for i in range(0, len(lst)):\n        pair_sum = lst[i] + lst[i + 1]\n        result.append(pair_sum)\n\n    return result\n\n\ndef main():\n    # define a list to test with\n    lst = [1, 2, 3, 4]\n    print(sum_pairs(lst))\n\n\nif __name__ == "__main__":\n    main()'},terminal:{highlightedLines:[3,4],text:'$ python3 sum_pairs.py\nTraceback (most recent call last):\n    File "sum_pairs.py", line 27, in <module>\n        main()\n    File "sum_pairs.py", line 23, in main\n        print(sum_pairs(lst))\n    File "sum_pairs.py", line 14, in sum_pairs\n        pair_sum = lst[i] + lst[i + 1]\nIndexError: list index out of range'}},{guide:{html:"\n<div class=\"text-center\"><h2> Fixing the program </h2></div><hr />\n<p>\n    Now that we have a sense of what each of the individual \n    parts of the error message tell us, we can move on to \n    understanding how we can use this information to correct\n    our program.\n</p>\n<p>\n    The most telling piece of evidence is that we have an \n    <code>IndexError</code> in our code, meaning that an \n    index we're using into our list is invalid. \n</p>\n<p>\n    As a result, we need to find a place in our code wherein\n    we're indexing into a list, and investigate how we might\n    be using an invalid index there. The error message \n    suggests that it's happening in one of three places:\n</p>\n<ul>\n    <li>Line 14: <code>pair_sum = lst[i] + lst[i + 1]</code></li>\n    <li>Line 23: <code>print(sum_pairs(lst))</code></li>\n    <li>Line 27: <code>main()</code></li>\n</ul>\n<p>\n    Before moving onto the next section, try figuring out \n    which of these lines might be incorrectly indexing into a list.\n    Which of them is indexing into a list at all? \n</p>\n"},editor:{highlightedLines:[],text:'\ndef sum_pairs(lst):\n    """\n    Given a nonempty list of integers, computes \n    the sum of each pair of consecutive integers \n    and returns a list of these sums.\n\n    >>> sum_pairs([1,2,3,4])\n    [3, 5, 7]\n    """\n    result = []\n\n    for i in range(0, len(lst)):\n        pair_sum = lst[i] + lst[i + 1]\n        result.append(pair_sum)\n\n    return result\n\n\ndef main():\n    # define a list to test with\n    lst = [1, 2, 3, 4]\n    print(sum_pairs(lst))\n\n\nif __name__ == "__main__":\n    main()'},terminal:{highlightedLines:[],text:'$ python3 sum_pairs.py\nTraceback (most recent call last):\n    File "sum_pairs.py", line 27, in <module>\n        main()\n    File "sum_pairs.py", line 23, in main\n        print(sum_pairs(lst))\n    File "sum_pairs.py", line 14, in sum_pairs\n        pair_sum = lst[i] + lst[i + 1]\nIndexError: list index out of range'}},{guide:{html:"\n<div class=\"text-center\"><h2> Isolating the cause </h2></div><hr />\n<p>\n    Line 14 of the program is likely the culprit,\n    since it's the only one of the lines of code \n    which is accessing an index in a list: \n</p>\n<div class=\"text-center\">\n    <code>pair_sum = lst[i] + lst[i + 1]</code>\n</div>\n<br />\n<p>\n    We're using two separate indices in this line: \n    <code>i</code> and <code>i + 1</code>. Either of \n    these might be invalid, and in order to fix our \n    program, we need to identify which index is the \n    problematic one. \n</p>\n<p>\n    There are several strategies you might reasonably\n    choose to employ at this point. Perhaps the most \n    tempting might be to try to reason through the code, \n    and deduce what is causing the program's misbehaviour. \n</p>\n<p>\n    This isn't a bad idea, and is eventually what we'll \n    turn to. That said, correct and effective deduction relies on \n    plentiful evidence, and we might not have quite enough \n    evidence just yet. For example, line 27 occurs within a \n    <code>for</code> loop, and it's unclear to us which \n    iteration of the <code>for</code> loop the error is \n    occurring in. Luckily, there's one tool you're very \n    familiar with already that can help us collect this \n    evidence: the <code>print</code> function.\n</p>\n\n"},editor:{highlightedLines:[14],text:'\ndef sum_pairs(lst):\n    """\n    Given a nonempty list of integers, computes \n    the sum of each pair of consecutive integers \n    and returns a list of these sums.\n\n    >>> sum_pairs([1,2,3,4])\n    [3, 5, 7]\n    """\n    result = []\n\n    for i in range(0, len(lst)):\n        pair_sum = lst[i] + lst[i + 1]\n        result.append(pair_sum)\n\n    return result\n\n\ndef main():\n    # define a list to test with\n    lst = [1, 2, 3, 4]\n    print(sum_pairs(lst))\n\n\nif __name__ == "__main__":\n    main()'},terminal:{highlightedLines:[],text:'$ python3 sum_pairs.py\nTraceback (most recent call last):\n    File "sum_pairs.py", line 27, in <module>\n        main()\n    File "sum_pairs.py", line 23, in main\n        print(sum_pairs(lst))\n    File "sum_pairs.py", line 14, in sum_pairs\n        pair_sum = lst[i] + lst[i + 1]\nIndexError: list index out of range'}},{guide:{html:"<div class=\"text-center\"><h2> Debugging with <code>print</code></h2></div><hr />\n<p>\n    You might be most familiar with <code>print</code>\n    as a function that outputs information for a user \n    to read, but it's also an instrumental tool in \n    inspecting the state of your program and your variables\n    as you debug a program. \n</p>\n<p>\n    As a reminder, our current task is to identify which \n    of the indices <code>i</code> or <code>i + 1</code> on \n    line 14 might be causing an <code>IndexError</code> in \n    our code. The problem that presented itself to us was \n    that we weren't certain which iteration of the <code>for</code> loop\n    on line 13 the error was actually happening in. \n</p>\n<p>\n    Thus, it might be helpful for us to see how many times \n    the <code>for</code> loop is executed before the crash \n    occurs. In addition, since we're interested in the values \n    of <code>i</code> and <code>i + 1</code> as the for loop \n    progresses, we might want to see their values too. \n</p>\n<p>\n    Before moving to the next section, take a look at the \n    <code>for</code> loop. What might you want to <code>print</code>, \n    and when, in order to get some additional helpful \n    evidence?\n</p>\n\n\n\n"},editor:{highlightedLines:[13,14],text:'\ndef sum_pairs(lst):\n    """\n    Given a nonempty list of integers, computes \n    the sum of each pair of consecutive integers \n    and returns a list of these sums.\n\n    >>> sum_pairs([1,2,3,4])\n    [3, 5, 7]\n    """\n    result = []\n\n    for i in range(0, len(lst)):\n        pair_sum = lst[i] + lst[i + 1]\n        result.append(pair_sum)\n\n    return result\n\n\ndef main():\n    # define a list to test with\n    lst = [1, 2, 3, 4] \n    print(sum_pairs(lst))\n\n\nif __name__ == "__main__":\n    main()'},terminal:{highlightedLines:[],text:'$ python3 sum_pairs.py\nTraceback (most recent call last):\n    File "sum_pairs.py", line 27, in <module>\n        main()\n    File "sum_pairs.py", line 23, in main\n        print(sum_pairs(lst))\n    File "sum_pairs.py", line 14, in sum_pairs\n        pair_sum = lst[i] + lst[i + 1]\nIndexError: list index out of range'}},{guide:{html:"<div class=\"text-center\"><h2> Debugging with <code>print</code></h2></div><hr />\n<p>\n    While there isn't a single correct answer to the \n    question presented in the last section, the simplest \n    possible <code>print</code> that still provides \n    us with helpful output is to <code>print(i)</code>\n    at the beginning of each iteration of the for loop. \n</p>\n<p>\n    Importantly, we do this <code>print</code> before we index into \n    the list on line 15. The program crashes on that line, \n    and we'd like to have the <code>print</code> execute before that \n    crash.\n</p>\n<p>\n    Now, when we run the program, we see some additional output,\n    highlighted in the terminal above. \n</p>\n\n\n\n"},editor:{highlightedLines:[14],text:'\ndef sum_pairs(lst):\n    """\n    Given a nonempty list of integers, computes \n    the sum of each pair of consecutive integers \n    and returns a list of these sums.\n\n    >>> sum_pairs([1,2,3,4])\n    [3, 5, 7]\n    """\n    result = []\n\n    for i in range(0, len(lst)):\n        print(i)\n        pair_sum = lst[i] + lst[i + 1]\n        result.append(pair_sum)\n\n    return result\n\n\ndef main():\n    # define a list to test with\n    lst = [1, 2, 3, 4] \n    print(sum_pairs(lst))\n\n\nif __name__ == "__main__":\n    main()'},terminal:{highlightedLines:[2,3,4,5],text:'$ python3 sum_pairs.py\n0\n1\n2\n3\nTraceback (most recent call last):\n    File "sum_pairs.py", line 27, in <module>\n        main()\n    File "sum_pairs.py", line 23, in main\n        print(sum_pairs(lst))\n    File "sum_pairs.py", line 14, in sum_pairs\n        pair_sum = lst[i] + lst[i + 1]\nIndexError: list index out of range'}},{guide:{html:'<div class="text-center"><h2> Debugging with <code>print</code></h2></div><hr />\n<p>\n    The output from our <code>print</code> statement \n    provides a key piece of evidence: the program crashes \n    in the fourth iteration of the for loop, when <code>\n    i=3</code>. \n</p>\n<p>\n    This means that the indices <code>i</code> and \n    <code>i + 1</code> are 3 and 4, respectively. \n    On line 15, we use these as indices into \n    <code>lst</code>, which is equal to <code>\n    [1, 2, 3, 4]</code>.\n</p>\n<p>\n    Before moving to the next section, try reasoning \n    about which of these indices is the problematic one. \n    Why is it problematic? What can we do to fix it?\n</p>\n\n\n\n'},editor:{highlightedLines:[],text:'\ndef sum_pairs(lst):\n    """\n    Given a nonempty list of integers, computes \n    the sum of each pair of consecutive integers \n    and returns a list of these sums.\n\n    >>> sum_pairs([1,2,3,4])\n    [3, 5, 7]\n    """\n    result = []\n\n    for i in range(0, len(lst)):\n        print(i)\n        pair_sum = lst[i] + lst[i + 1]\n        result.append(pair_sum)\n\n    return result\n\n\ndef main():\n    # define a list to test with\n    lst = [1, 2, 3, 4] \n    print(sum_pairs(lst))\n\n\nif __name__ == "__main__":\n    main()'},terminal:{highlightedLines:[2,3,4,5],text:'$ python3 sum_pairs.py\n0\n1\n2\n3\nTraceback (most recent call last):\n    File "sum_pairs.py", line 27, in <module>\n        main()\n    File "sum_pairs.py", line 23, in main\n        print(sum_pairs(lst))\n    File "sum_pairs.py", line 14, in sum_pairs\n        pair_sum = lst[i] + lst[i + 1]\nIndexError: list index out of range'}},{guide:{html:"<div class=\"text-center\"><h2> The root cause</code></h2></div><hr />\n<p>\n    The problematic index is <code>i + 1</code>, which in the 4th \n    iteration of the <code>for</code> loop is equal to <code>4</code> \n    (remember, <code>i</code> starts off with a value of <code>0</code>).\n    <code>lst</code> has 4 elements, so accessing <code>lst[i + 1]</code>\n    is an invalid index and so causes the <code>IndexError</code>.\n</p>\n<p>\n    In short, our problem is that we're running off the end of the list:\n    specifically, that we're going through the loop one too many times. \n    Semantically, it's probably unnecessary that we even get there: our goal \n    in the function is to sum elements in the list with the elements that follow\n    them, and there's nothing after the last element in the list. \n</p>\n<p>\n    With that in mind, think about how you'd change this code to fix the bug \n    before moving to the next section. \n</p>\n\n\n\n\n"},editor:{highlightedLines:[13],text:'\ndef sum_pairs(lst):\n    """\n    Given a nonempty list of integers, computes \n    the sum of each pair of consecutive integers \n    and returns a list of these sums.\n\n    >>> sum_pairs([1,2,3,4])\n    [3, 5, 7]\n    """\n    result = []\n\n    for i in range(0, len(lst)):\n        print(i)\n        pair_sum = lst[i] + lst[i + 1]\n        result.append(pair_sum)\n\n    return result\n\n\ndef main():\n    # define a list to test with\n    lst = [1, 2, 3, 4] \n    print(sum_pairs(lst))\n\n\nif __name__ == "__main__":\n    main()'},terminal:{highlightedLines:[],text:'$ python3 sum_pairs.py\n0\n1\n2\n3\nTraceback (most recent call last):\n    File "sum_pairs.py", line 27, in <module>\n        main()\n    File "sum_pairs.py", line 23, in main\n        print(sum_pairs(lst))\n    File "sum_pairs.py", line 14, in sum_pairs\n        pair_sum = lst[i] + lst[i + 1]\nIndexError: list index out of range'}},{guide:{html:'<div class="text-center"><h2> Another bug bites the dust</h2></div><hr />\n<p>\n    With all that behind us, the fix is relatively simple: \n    rather than setting the upper bound of the call to \n    <code>range</code> to be <code>len(lst)</code>, \n    we set it to be <code>len(lst) - 1</code>. This \n    means that the maximum possible value of <code>i</code>\n    is <code>len(lst) - 2</code> (or in the case of this \n    particular program, 2). Thus, the maximum value of \n    <code>i + 1</code> is <code>len(lst) - 1</code> (or\n    in the case of this particular program, 3), which \n    remains a valid index. \n</p>\n<p>\n    Running this modified program reveals to us the fruits \n    of our labor: the program doesn\'t crash, and more to the point, \n    gives us the correct output!\n</p>\n\n\n\n'},editor:{highlightedLines:[13],text:'\ndef sum_pairs(lst):\n    """\n    Given a nonempty list of integers, computes \n    the sum of each pair of consecutive integers \n    and returns a list of these sums.\n\n    >>> sum_pairs([1,2,3,4])\n    [3, 5, 7]\n    """\n    result = []\n\n    for i in range(0, len(lst) - 1):\n        pair_sum = lst[i] + lst[i + 1]\n        result.append(pair_sum)\n\n    return result\n\n\ndef main():\n    # define a list to test with\n    lst = [1, 2, 3, 4] \n    print(sum_pairs(lst))\n\n\nif __name__ == "__main__":\n    main()'},terminal:{highlightedLines:[2],text:"$ python3 sum_pairs.py\n[3, 5, 7]"}}];function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}var m=function(e){return function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){Object(h.a)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({stage:e},u[e])},d=m(0),g=Object(l.c)({navbarReducer:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:d,n=arguments.length>1?arguments[1]:void 0;switch(n.type){case"NEXT_STAGE":return m(e.stage+1);case"PREV_STAGE":return m(e.stage-1);default:return e}}});var f=t(48),y=t(19),_=(t(85),t(110)),b=t(107),w=a.a.createElement("div",null,a.a.createElement("p",null,"This project presents ",a.a.createElement("i",null,"StepThrough"),", an interactive debugging tutorial targeted at students in CS 106A or an equivalent CS1-level course."),a.a.createElement("p",null,"At this stage in their programming careers, students often lack intuition as to how to systematically approach debugging and reasoning about programs that are misbehaving or otherwise incorrect. Often, this manifests in their process by randomly perturbing portions of their code they suspect are incorrect or simply starting from scratch."),a.a.createElement("p",null,"In my experience, these practices are the consequence of a lack of exposure to common debugging techniques: ",a.a.createElement("code",null,"print "),"debugging and parsing error messages, for example. During office hours, when I walk a student through either of these processes, their most common reaction is to be shocked that such simple actions can significantly facilitate the debugging process. While this teaching is effective, it is limited by the infrequency with which students come to office hours, as well as a lack of 'replayability': when attempting to solve their own bugs later on, a student can only consult their own memory of my help or any notes they took."),a.a.createElement("p",null,a.a.createElement("i",null,"StepThrough")," is in principle an attempt to remove such limitations. It operates as a web application that could be posted on a course website or section handout, which students are free to visit whenever they feel the need to do so. Additionally, it can be used either as a core part of course material or simpply a supplement to students having particular difficulties with debugging."),a.a.createElement("p",null,"The ",a.a.createElement("i",null,"Pedagogy")," and ",a.a.createElement("i",null,"Roadmap")," tabs on this page outline in more detail the educational decisions made in this demo, as well as plans for future development on this project. Alternatively, click",a.a.createElement("i",null,"Start Learning")," to begin the demo.")),v=a.a.createElement("div",null,a.a.createElement("p",null,"Two key pedagogical decisions presented themselves in the course of this project. The first was to identify the initial problem to tackle as a proof of concept. Once this decision made, I then needed to figure out how best to walk students through the debugging process."),a.a.createElement("h4",null,"Choosing what to teach"),a.a.createElement("hr",null),a.a.createElement("p",null,"Upon deciding to work on this project, I decided that the initial version of ",a.a.createElement("i",null,"StepThrough")," should target the debugging task that students encounter first. After reflecting on this-and discussing it with some of the students in CS 106A this quarter-it seemed clear that the first big debugging hurdle for students was what to do upon encountering an error message."),a.a.createElement("p",null,"Interestingly, this isn't the first kind of bug a student is likely to encounter in CS 106A. However, the playground-like environments of Karel or Bit that students begin with in CS 106A are particularly good at emphasizing the debugging process. When a student's robot doggedly forges into the walls of the world, the student generally has a good sense of what part of the code might be causing this misbehaviour: the graphical, stepwise nature of the program emphasizes this understanding of what each line of code's responsibility is. This intuition often does not translate to subsequent programs in which the thread of execution is not as visually apparent."),a.a.createElement("p",null,"In such programs, mistakes often manifest as error messages indicating, for example, that a student is attempting to call a method on an object with an incorrect type or trying to access something out of the bounds of a particular data structure. While undoubtedly helpful, these errors often look unfriendly and as a result, students frequently overlook them."),a.a.createElement("p",null,"At a high level, thus, the tutorial proceeds by presenting students with an incorrect program that produces an error message and walking them through the process of converting that error message into actionable cognitive feedback on what parts of their code might be incorrect."),a.a.createElement("h4",null,"Deciding how to teach it"),a.a.createElement("hr",null),a.a.createElement("p",null,"My pedagogical approach to reviewing error messages drew inspiration from the introductory playgrounds students encounter in CS 106A. In such assignments, students generally have a good sense of the purpose of each line of code and how it relates to the behaviour of the program. Consequently, when something went wrong, the progam itself provided evidence as to which portion of code was incorrect."),a.a.createElement("p",null,"In the context of error messages, students must collect evidence not just from the output of the program (of which there is precious little), but also the error message itself. Thus, the first part of the tutorial follows this process:"),a.a.createElement("ol",null,a.a.createElement("li",null,a.a.createElement("p",null,a.a.createElement("b",null,"An overview of error messages:")," Specifically, that they are Python's attempt to provide as much helpful information as they can about what went wrong to cause a crash.")),a.a.createElement("li",null,a.a.createElement("p",null,a.a.createElement("b",null,"Reviewing the anatomy of an error message"),": That the two key portions of an error message are the exception itself and the traceback. In particular, each pair of lines in the traceback points at a specific line of code in the call stack and each provides a distinct kind of evidence as to the program's state at the point of the crash."))),a.a.createElement("p",null,"At each point of this process, I also highlight the lines of interest in both the error message and the code itself. Following this, the tutorial shifts gear to actually fixing the bug in the program. It once again presents this process as having the goal of collecting evidence to correctly deduce what might be going wrong. In order to do so, I introduce the process of ",a.a.createElement("code",null,"print ")," debugging as a way to reveal portions of a program's state that might be of interest."),a.a.createElement("ol",{start:"3"},a.a.createElement("li",null,a.a.createElement("p",null,a.a.createElement("b",null,"Deciding what other evidence we need:")," While an error message provides useful information on ",a.a.createElement("i",null,"where")," in a program the crash is happening, it doesn't always tell us",a.a.createElement("i",null,"when"),". If the crash happens in a loop, for example, it may not be clear which iteration of the loop it occurs in.")),a.a.createElement("li",null,a.a.createElement("p",null,a.a.createElement("b",null,a.a.createElement("code",null,"print")," debugging:")," Specifically, printing the index variable in a ",a.a.createElement("code",null,"for")," loop to see at which specific iteration the program crashed.")))),E=a.a.createElement("div",null,a.a.createElement("p",null,"The roadMap for ",a.a.createElement("i",null,"StepThrough")," is divided into three portions: the short-term, the long-term, and stretch goals."),a.a.createElement("h4",null,"Short-term Roadmap"),a.a.createElement("hr",null),a.a.createElement("p",null,"I have several specific short-term goals that I'm shooting to have completed by the beginning of Winter Quarter. These culminate with deploying ",a.a.createElement("i",null,"StepThrough")," for CS 106A next quarter. In order to meet that goal, several subgoals must be met. Most of these aren't technical, but rather pedagogical to make sure this can genuinely provide utility to students."),a.a.createElement("ul",null,a.a.createElement("li",null,a.a.createElement("p",null,a.a.createElement("i",null,"Developing additional tutorials:")," In addition to the error message tutorial-which will be refined-my goal is to also have tutorials covering debugging programs which do not crash, but have incorrect output, and also a quick tutorial covering how to fix syntax issues (which I can imagine being useful at the beginning of the course).")),a.a.createElement("li",null,a.a.createElement("p",null,a.a.createElement("i",null,"Additional Verbiage:")," Building a student-facing landing page that outlines the different ways they can use",a.a.createElement("i",null," StepThrough"),"."))),a.a.createElement("h4",null,"Long-term Roadmap"),a.a.createElement("hr",null),a.a.createElement("p",null,"In the long-term, I envision ",a.a.createElement("i",null,"StepThrough")," acting as something of a debugging 'playground': an environment in which students with debugging issues can familiarize themselves with their issue in an environment which guides them through the process. This is achieved through a combination of long-term and stretch goals."),a.a.createElement("p",null,"The long-term goals, which I hope to have achieved by the end of next quarter are mostly technical, and are as follows:"),a.a.createElement("ul",null,a.a.createElement("li",null,a.a.createElement("p",null,a.a.createElement("i",null,"Building an execution backend"),": Currently,",a.a.createElement("i",null," StepThrough ")," is very staged: the tutorials, programs and program output are all hardcoded. However, I would eventually like for students to be able to make arbitrary modifications to the tutorial code and be able to execute it to see how it helps them debug."),a.a.createElement("p",null,"This involves writing a backend that can accept arbitrary Python code and execute it and return the output or error messages. Writing a system that can do this securely is complex, but important to get right, since most of my other long-term and stretch goals require such a backend.")),a.a.createElement("li",null,a.a.createElement("p",null,a.a.createElement("i",null,"Rubric sampled programs"),": Rather than just relying on hardcoded incorrect programming, I'd like to be able to use Rubric sampling to produce a large number of programs with labels for their mistakes. Ideally, upon a student beginning a debugging tutorial, ",a.a.createElement("i",null,"StepThrough"),"'s backend would sample a new program-mistakes and the client would be able to walk a student through debugging it."),a.a.createElement("p",null,"Such a system requires a compromise: in order to generate problems on the fly, the walkthrough itself might not be able to make as specific a reference to the details of the solution, other than parsing line numbers from error messages. However, these more generic tutorials might complement the more curated ones, providing practice once a student has been through a few guided demonstrations."))),a.a.createElement("h4",null,"Stretch Goals"),a.a.createElement("hr",null),a.a.createElement("p",null,"These goals-as their name suggests-are less well-formed, but will hopefully be further actualized in the longness of time."),a.a.createElement("ul",null,a.a.createElement("li",null,a.a.createElement("p",null,a.a.createElement("i",null,"Providing assignment help:")," Providing the option for students to paste buggy assignment code into",a.a.createElement("i",null,"StepThrough"),", and being walked towards a solution.")),a.a.createElement("li",null,a.a.createElement("p",null,"Support for other programming languages"))));t(86);function x(e){return a.a.createElement("div",{className:"contentsPane"},w)}function k(e){return a.a.createElement("div",{className:"contentsPane"},v)}function T(e){return a.a.createElement("div",{className:"contentsPane"},E)}var O=function(){return a.a.createElement("div",{className:"mainContents"},a.a.createElement("h1",{className:"text-center"},"StepThrough"),a.a.createElement("br",null),a.a.createElement(_.a,{fill:!0,defaultActiveKey:"about",mountOnEnter:!0},a.a.createElement(b.a,{eventKey:"about",title:"About"},a.a.createElement(x,null)),a.a.createElement(b.a,{eventKey:"pedagogy",title:"Pedagogy"},a.a.createElement(k,null)),a.a.createElement(b.a,{eventKey:"roadmap",title:"RoadMap"},a.a.createElement(T,null)),a.a.createElement(b.a,{eventKey:"start",title:"Start Learning",className:"redirect"},a.a.createElement(y.a,{to:"/errormessages"}))))},S=t(52),j=(t(91),t(92),t(43)),I=t.n(j),F=(t(98),t(99),function(e){for(var n=[],t=0;t<e.length;t++)n.push({startRow:e[t]-1,endRow:e[t],className:"highlighted",type:"text"});return n});var L=function(e){return a.a.createElement(I.a,{mode:"python",theme:"monokai",editorProps:{$blockScrolling:!0},value:e.text,markers:F(e.highlightedLines),className:e.className,height:"100%",width:"100%",fontSize:18,highlightActiveLine:!1})};function P(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}var A=Object(o.b)((function(e){return function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?P(Object(t),!0).forEach((function(n){Object(h.a)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):P(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({},e.navbarReducer.editor)}))(L),q=(t(100),t(101),t(102),function(e){for(var n=[],t=0;t<e.length;t++)n.push({startRow:e[t]-1,endRow:e[t],className:"highlighted",type:"text"});return n});var N=function(e){return a.a.createElement(I.a,{mode:"text",theme:"pastel_on_dark",editorProps:{$blockScrolling:!0,$displayIndentGuides:!1},className:e.className,height:"100%",width:"100%",value:e.text,fontSize:18,showGutter:!1,highlightActiveLine:!1,markers:q(e.highlightedLines),readOnly:!0})};function G(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}var R=Object(o.b)((function(e){return function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?G(Object(t),!0).forEach((function(n){Object(h.a)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):G(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({},e.navbarReducer.terminal)}))(N);t(103);var D=function(e){return a.a.createElement("div",{className:"content",dangerouslySetInnerHTML:{__html:e.html}})},W=Object(o.b)((function(e){return{html:e.navbarReducer.guide.html}}))(D),C=t(68),$=t(69),z=t(73),B=t(70),M=t(74),K=t(108),H=t(111),V=t(112),J=t(109),U=(t(104),function(e){return a.a.createElement(K.a,e,"Left arrow key")}),X=function(e){return a.a.createElement(K.a,e,"Right arrow key")},Q=function(e){function n(){return Object(C.a)(this,n),Object(z.a)(this,Object(B.a)(n).apply(this,arguments))}return Object(M.a)(n,e),Object($.a)(n,[{key:"componentDidMount",value:function(){var e=this;document.addEventListener("keydown",(function(n){37===n.keyCode&&e.props.stage>0&&e.props.prevStage(),39===n.keyCode&&e.props.stage+1!==e.props.numStages&&e.props.nextStage()}))}},{key:"render",value:function(){return a.a.createElement("div",null,a.a.createElement(H.a,{bg:"dark",variant:"dark",fixed:"top"},a.a.createElement(H.a.Brand,{href:"http://brahmcapoor.com/StepThrough"},"StepThrough"),a.a.createElement("div",{className:"ml-auto right-part"},a.a.createElement(V.a,{placement:"bottom",delay:{show:600,hide:100},overlay:U},a.a.createElement(J.a,{variant:"outline-info",onClick:this.props.prevStage,disabled:0===this.props.stage},"Previous")),"\xa0 \xa0",a.a.createElement("span",null,this.props.stage+1," / ",this.props.numStages),"\xa0 \xa0",a.a.createElement(V.a,{placement:"bottom",delay:{show:200,hide:100},overlay:X},a.a.createElement(J.a,{variant:"outline-success",onClick:this.props.nextStage,disabled:this.props.stage+1===this.props.numStages},"Next")))))}}]),n}(a.a.Component),Y=Object(o.b)((function(e){return{stage:e.navbarReducer.stage,numStages:u.length}}),(function(e){return{nextStage:function(){return e((function(e){e({type:"NEXT_STAGE"})}))},prevStage:function(){return e((function(e){e({type:"PREV_STAGE"})}))}}}))(Q);var Z=Object(o.b)()((function(){return a.a.createElement("div",{className:"App"},a.a.createElement("div",{className:"nav"},a.a.createElement(Y,null)),a.a.createElement(S.a,{split:"vertical",primary:"first",defaultSize:"50%",className:"panes"},a.a.createElement(A,null),a.a.createElement(S.a,{split:"horizontal",primary:"first",defaultSize:"35%"},a.a.createElement(R,null),a.a.createElement(W,null))))}));Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));var ee,ne=a.a.createElement(o.a,{store:Object(l.d)(g,ee,Object(l.a)(c.a))},a.a.createElement(f.a,{basename:"/StepThrough"},a.a.createElement("div",null,a.a.createElement(y.b,{exact:!0,path:"/",component:O}),a.a.createElement(y.b,{path:"/errormessages",component:Z}))));s.a.render(ne,document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()}))},76:function(e,n,t){e.exports=t(105)},85:function(e,n,t){},86:function(e,n,t){},91:function(e,n,t){},92:function(e,n,t){}},[[76,1,2]]]);
//# sourceMappingURL=main.56a96bba.chunk.js.map